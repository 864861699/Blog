<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[spring boot 中@Scheduled]]></title>
    <url>%2F2017%2F11%2F09%2Fspring-boot-%E4%B8%AD-Scheduled%2F</url>
    <content type="text"><![CDATA[@Scheduled使用 启动类需要加上@EnableScheduling注解表示启用定时任务 具体实现定时任务的类需要加上@Component，表明该类为一个组件 具体的方法需要加上@Scheduled 1234567891011121314@Componentpublic class TaskDemo &#123; @Scheduled(cron = &quot;0 0 2 * * ?&quot;) //每天凌晨两点执行 void doSomethingWith()&#123; logger.info(&quot;定时任务开始......&quot;); long begin = System.currentTimeMillis(); //执行数据库操作 long end = System.currentTimeMillis(); logger.info(&quot;定时任务结束，共耗时：[&quot; + (end-begin) / 1000 + &quot;]秒&quot;); &#125;&#125; @Scheduled 注解中cron参数的计划时间：按顺序依次为: 秒（0~59） 分钟（0~59） 小时（0~23） 天（月）（0~31，但是你需要考虑你月的天数） 月（0~11） 天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT） 年份（1970－2099） 字段 允许值 允许的特殊字符 秒 0-59 , - * / 分 0-59 , - * / 小时 0-23 , - * / 日期 1-31 , - * ? / L W C 月份 1-12 或者 JAN-DEC , - * / 星期 1-7 或者 SUN-SAT , - * ? / L C # 年（可选） 留空, 1970-2099 , - * / 详细用例: 其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于”月份中的日期”和”星期中的日期”这两个元素互斥的,必须要对其中一个设置?.0 0 10,14,16 ? 每天上午10点，下午2点，4点0 0/30 9-17 ? 朝九晚五工作时间内每半小时0 0 12 ? WED 表示每个星期三中午12点“0 0 12 ?” 每天中午12点触发“0 15 10 ? “ 每天上午10:15触发“0 15 10 ?” 每天上午10:15触发“0 15 10 ? “ 每天上午10:15触发“0 15 10 ? 2005” 2005年的每天上午10:15触发“0 14 ?” 在每天下午2点到下午2:59期间的每1分钟触发“0 0/5 14 ?” 在每天下午2点到下午2:55期间的每5分钟触发“0 0/5 14,18 ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发“0 0-5 14 ?” 在每天下午2点到下午2:05期间的每1分钟触发“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发“0 15 10 ? MON-FRI” 周一至周五的上午10:15触发“0 15 10 15 ?” 每月15日上午10:15触发“0 15 10 L ?” 每月最后一日的上午10:15触发“0 15 10 ? 6L” 每月的最后一个星期五上午10:15触发“0 15 10 ? 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发“0 15 10 ? 6#3” 每月的第三个星期五上午10:15触发有些子表达式能包含一些范围或列表例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”“”字符代表所有可能的值因此，“”在子表达式（月）里表示每个月的含义，“”在子表达式（天（星期））表示星期的每一天 “/”字符用来指定数值的增量例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟 在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，2 3&gt;，43”）的含义一样 “？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的 值设&gt;为“？” “L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写但是它在两个子表达式里的含义是不同的。在天（月）子表达式中，“L”表示一个月的最后一天在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT如果在“L”前有具体的内容，它就具有其他的含义了例如：“6L”表示这个月的倒数第６天，“ＦＲＩＬ”表示这个月的最一个星期五注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[配置博客]]></title>
    <url>%2F2017%2F11%2F01%2F%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第一次开始]]></title>
    <url>%2F2017%2F11%2F01%2F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[语法 说明 git init 初始化 git status 查看状态 git checkout -b aaa 复制分支并声明 git checkout 分支名 切换分支 git branch –D 分支名 删除分支 git remote -v 查看地址 git remote add aixiang www.baidu.com 添加地址 git add 添加文件到分支中 git log 查看日志按Q结束 git pull origin release (orgin 线上远程仓库名，release 远程分支名) 从远程直接拉取 git branch 查看分支 git commit -m ‘备注’ 保存到本地仓库 git push aixiang release （aixiang 远程本地仓库，release 远程本地分支名） 推送到远程本地仓库 git push aixiang release -f（aixiang 远程本地仓库，release 远程本地分支名） 推送到远程本地仓库，-f为强制提交，多用于已经创建合并请求却需要修改文件 git status 缓存当前分支文件，ps：查看状态红色的文件没有add添加到分支的文件 git status list 查看缓存的历史 git status pop 还原上一次的缓存 git fetch origin release （origin远程仓库名，release 远程分支名） 获取线上最新数据 git merge origin/release （origin远程仓库名，release 远程分支名） 将origin/release合并到当前的分支 123456789更新思路：- 没有冲突- 直接出错1.git stash 暂存2.合并 git merge origin/release（将origin/release合并到当前的分支）3.手动解决冲突4.add ==&gt; commit5.stash pop3. add ==&gt; commit ==&gt; push 推送过程中 建议先更新再推送，如何做？ 先获取最新数据 没冲突直接合并，如果有冲突先缓存当前文件 此时如果有冲突手动修改，然后释放缓存文件 再次修改冲突文件，依次添加到分支 提交本地仓库，如果创建合并请求了，应当强制提交 具体代码如下： git fetch origin release //获取最新数据 if 此时如何有冲突 git stash //先缓存当前文件 git merge origin/release //合并线上文件 //根据提示手动修改冲突 git stash pop //释放缓存文件 //手动修改冲突文件 git add //依次添加文件进入分支 git merge origin/release //手动合并 git commit -m ‘备注’ //提交本地仓库 git push origin/release //提交至线上本地仓库 if 此时已经创建过合并请求需要 git push origin/release -f //强制提交至线上本地仓库 2.如果直接推送可能会有合并冲突，已经有合并冲突时如何解决？ 假如已经有冲突应该先更新最新的线上仓库数据，然后可以采用上述1,过程执行 多分支 A正在开发，没有开发完，现在紧急开发B 首先我们需要创建一个和线上同步数据的分支，一般采用release, 注：此分支不可以用来写代码，用来更新线上最新数据 若现在A处于半开发状态，紧急处理B，我们应该在release分支下新建一个分支，如B。 此时切换分支到B分支进行开发 具体代码如下： git branch //查看分支 git checkout -b aaa //复制并声明分支 git checkout aaa //切换到指定分支 新手使用步骤：1.首先初始化：git init2.分别添加本地地址，及线上分支地址：git remote add aixiang www.baidu.com3.查看添加地址是否正确：git remote -v4.拉取代码：git fetch origin release 注：origin远程仓库名 release远程仓库分支名5.合并到本地:git merge origin/release 解决git中文乱码 //解决窗体乱码 1 git config –global gui.encoding utf-8]]></content>
  </entry>
</search>
